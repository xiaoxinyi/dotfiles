;; Object tables/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "tables/"
  :tables
  (list
    (semanticdb-table "index.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Here is defined the Index class.\"\"\"" code nil nil [272 310])
            ("__future__" include nil nil [312 349])
            ("math" include nil nil [350 361])
            ("operator" include nil nil [362 377])
            ("os" include nil nil [378 387])
            ("os.path" include nil nil [388 402])
            ("sys" include nil nil [403 413])
            ("tempfile" include nil nil [414 429])
            ("warnings" include nil nil [430 445])
            ("time" include nil nil [447 475])
            ("numpy" include nil nil [477 489])
            ("" code nil nil [519 620])
            ("tables" include nil nil [622 657])
            ("tables.node" include nil nil [658 696])
            ("tables.atom" include nil nil [697 735])
            ("tables.earray" include nil nil [736 768])
            ("tables.carray" include nil nil [769 801])
            ("tables.leaf" include nil nil [802 833])
            ("tables.indexes" include nil nil [834 897])
            ("tables.group" include nil nil [898 928])
            ("tables.path" include nil nil [929 962])
            ("tables.exceptions" include nil nil [963 1011])
            ("tables.utils" include nil nil [1012 1063])
            ("" code nil nil [1098 1251])
            ("tables.lrucacheextension" include nil nil [1252 1300])
            ("tables._past" include nil nil [1302 1362])
            ("obversion" variable nil nil [1539 1556])
            ("debug" variable nil nil [1684 1697])
            ("profile" variable nil nil [1759 1774])
            ("if" code nil nil [1819 1871])
            ("defsort" variable nil nil [1966 1987])
            ("default_auto_index" variable nil nil [2182 2207])
            ("default_index_filters" variable nil nil [2428 2552])
            ("defaultAutoIndex" variable nil nil [2571 2608])
            ("defaultIndexFilters" variable nil nil [2609 2652])
            ("opt_search_types" variable nil nil [2794 2949])
            ("max32" variable nil nil [2985 2998])
            ("_table_column_pathname_of_index" function (:arguments 
              ( ("indexpathname" variable nil (reparse-symbol function_parameters) [3037 3050]))              ) nil [3001 3319])
            ("_tableColumnPathnameOfIndex" variable nil nil [3320 3395])
            ("Index" type
               (:documentation "Represents the index of a column in a table.

    This class is used to keep the indexing information for columns in a Table
    dataset (see :ref:`TableClassDescr`). It is actually a descendant of the
    Group class (see :ref:`GroupClassDescr`), with some added functionality. An
    Index is always associated with one and only one column in the table.

    .. note::

        This class is mainly intended for internal use, but some of its
        documented attributes and methods may be interesting for the
        programmer.

    Parameters
    ----------
    parentnode
        The parent :class:`Group` object.

        .. versionchanged:: 3.0
           Renamed from *parentNode* to *parentnode*.

    name : str
        The name of this node in its parent group.
    atom : Atom
        An Atom object representing the shape and type of the atomic objects to
        be saved. Only scalar atoms are supported.
    title
        Sets a TITLE attribute of the Index entity.
    kind
        The desired kind for this index.  The 'full' kind specifies a complete
        track of the row position (64-bit), while the 'medium', 'light' or
        'ultralight' kinds only specify in which chunk the row is (using
        32-bit, 16-bit and 8-bit respectively).
    optlevel
        The desired optimization level for this index.
    filters : Filters
        An instance of the Filters class that provides information about the
        desired I/O filters to be applied during the life of this object.
    tmp_dir
        The directory for the temporary files.
    expectedrows
        Represents an user estimate about the number of row slices that will be
        added to the growable dimension in the IndexArray object.
    byteorder
        The byteorder of the index datasets *on-disk*.
    blocksizes
        The four main sizes of the compound blocks in index datasets (a low
        level parameter).

    "
                :superclasses ("NotLoggedMixin" "indexesextension.Index" "Group")
                :members 
                  ( ("_c_classid" variable nil (reparse-symbol indented_block_body) [5396 5416])
                    ("_c_classId" variable nil (reparse-symbol indented_block_body) [5422 5470])
                    ("kind" variable nil (reparse-symbol indented_block_body) [5476 5659])
                    ("filters" variable nil (reparse-symbol indented_block_body) [5665 5833])
                    ("_getdirty" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5853 5857]))                          )
                        (reparse-symbol indented_block_body) [5839 6034])
                    ("_setdirty" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6053 6057])
                            ("dirty" variable nil (reparse-symbol function_parameters) [6059 6064]))                          )
                        (reparse-symbol indented_block_body) [6039 6474])
                    ("dirty" variable nil (reparse-symbol indented_block_body) [6479 6695])
                    ("_getcolumn" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6716 6720]))                          )
                        (reparse-symbol indented_block_body) [6701 6937])
                    ("column" variable nil (reparse-symbol indented_block_body) [6942 7080])
                    ("_gettable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7100 7104]))                          )
                        (reparse-symbol indented_block_body) [7086 7273])
                    ("table" variable nil (reparse-symbol indented_block_body) [7278 7388])
                    ("nblockssuperblock" variable nil (reparse-symbol indented_block_body) [7394 7544])
                    ("nslicesblock" variable nil (reparse-symbol indented_block_body) [7550 7685])
                    ("nchunkslice" variable nil (reparse-symbol indented_block_body) [7691 7825])
                    ("_g_nsuperblocks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7851 7855]))                          )
                        (reparse-symbol indented_block_body) [7831 8115])
                    ("nsuperblocks" variable nil (reparse-symbol indented_block_body) [8120 8245])
                    ("_g_nblocks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8266 8270]))                          )
                        (reparse-symbol indented_block_body) [8251 8520])
                    ("nblocks" variable nil (reparse-symbol indented_block_body) [8525 8630])
                    ("nslices" variable nil (reparse-symbol indented_block_body) [8636 8773])
                    ("nchunks" variable nil (reparse-symbol indented_block_body) [8779 8916])
                    ("shape" variable nil (reparse-symbol indented_block_body) [8922 9063])
                    ("temp_required" variable nil (reparse-symbol indented_block_body) [9069 9327])
                    ("want_complete_sort" variable nil (reparse-symbol indented_block_body) [9333 9524])
                    ("_is_csi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9542 9546]))                          )
                        (reparse-symbol indented_block_body) [9530 10118])
                    ("_is_CSI" variable nil (reparse-symbol indented_block_body) [10123 10154])
                    ("is_csi" variable nil (reparse-symbol indented_block_body) [10160 10368])
                    ("is_CSI" variable nil (reparse-symbol indented_block_body) [10374 10403])
                    ("nrowsinchunk" function
                       (:parent "dummy"
                        :decorators 
                          ( ("lazyattr" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10440 10444]))                          
                        :documentation "The number of rows that fits in a *table* chunk.")
                        (reparse-symbol indented_block_body) [10409 10551])
                    ("lbucket" function
                       (:parent "dummy"
                        :decorators 
                          ( ("lazyattr" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10582 10586]))                          
                        :documentation "Return the length of a bucket based index type.")
                        (reparse-symbol indented_block_body) [10556 11509])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [11848 11870])
                            ("\"\"\"The object version of this index.\"\"\"" code nil (reparse-symbol indented_block_body) [11879 11918])
                            ("self" variable nil (reparse-symbol indented_block_body) [11927 11951])
                            ("\"\"\"The optimization level for this index.\"\"\"" code nil (reparse-symbol indented_block_body) [11960 12004])
                            ("self" variable nil (reparse-symbol indented_block_body) [12013 12035])
                            ("\"\"\"The directory for the temporary files.\"\"\"" code nil (reparse-symbol indented_block_body) [12044 12088])
                            ("self" variable nil (reparse-symbol indented_block_body) [12097 12129])
                            ("\"\"\"The expected number of items of index arrays.\"\"\"" code nil (reparse-symbol indented_block_body) [12138 12189])
                            ("if" code nil (reparse-symbol indented_block_body) [12198 12329])
                            ("\"\"\"The byteorder of the index datasets.\"\"\"" code nil (reparse-symbol indented_block_body) [12337 12379])
                            ("if" code nil (reparse-symbol indented_block_body) [12388 13247])
                            ("self" variable nil (reparse-symbol indented_block_body) [13256 13273])
                            ("\"\"\"The total number of slices in the index.\"\"\"" code nil (reparse-symbol indented_block_body) [13282 13328])
                            ("self" variable nil (reparse-symbol indented_block_body) [13337 13358])
                            ("\"\"\"The number of currently indexed rows for this column.\"\"\"" code nil (reparse-symbol indented_block_body) [13367 13426])
                            ("self" variable nil (reparse-symbol indented_block_body) [13435 13463])
                            ("\"\"\"The four main sizes of the compound blocks (if specified).\"\"\"" code nil (reparse-symbol indented_block_body) [13472 13536])
                            ("self" variable nil (reparse-symbol indented_block_body) [13545 13567])
                            ("\"\"\"Dirty cache (for ranges, bounds & sorted) flag.\"\"\"" code nil (reparse-symbol indented_block_body) [13576 13629])
                            ("self" variable nil (reparse-symbol indented_block_body) [13638 13664])
                            ("\"\"\"Size of the superblock for this index.\"\"\"" code nil (reparse-symbol indented_block_body) [13673 13717])
                            ("self" variable nil (reparse-symbol indented_block_body) [13726 13747])
                            ("\"\"\"Size of the block for this index.\"\"\"" code nil (reparse-symbol indented_block_body) [13756 13795])
                            ("self" variable nil (reparse-symbol indented_block_body) [13804 13825])
                            ("\"\"\"Size of the slice for this index.\"\"\"" code nil (reparse-symbol indented_block_body) [13834 13873])
                            ("self" variable nil (reparse-symbol indented_block_body) [13882 13903])
                            ("\"\"\"Size of the chunk for this index.\"\"\"" code nil (reparse-symbol indented_block_body) [13912 13951])
                            ("self" variable nil (reparse-symbol indented_block_body) [13960 13983])
                            ("\"\"\"Filename for temporary bounds.\"\"\"" code nil (reparse-symbol indented_block_body) [13992 14028])
                            ("self" variable nil (reparse-symbol indented_block_body) [14037 14077])
                            ("\"\"\"The types for which and optimized search has been implemented.\"\"\"" code nil (reparse-symbol indented_block_body) [14086 14154])
                            ("self" code nil (reparse-symbol indented_block_body) [14163 14182])
                            ("\"\"\"The number of overlaps in an index.  0 means a completely
        sorted index. -1 means that this number is not computed yet.\"\"\"" code nil (reparse-symbol indented_block_body) [14191 14323])
                            ("self" variable nil (reparse-symbol indented_block_body) [14332 14346])
                            ("\"\"\"Time counter for benchmarking purposes.\"\"\"" code nil (reparse-symbol indented_block_body) [14355 14400])
                            ("tables.file" include nil (reparse-symbol indented_block_body) [14410 14443])
                            ("self" variable nil (reparse-symbol indented_block_body) [14452 14478])
                            ("\"\"\"The `open_file()` function, to avoid a circular import.\"\"\"" code nil (reparse-symbol indented_block_body) [14487 14548])
                            ("super" code nil (reparse-symbol indented_block_body) [14558 14624]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11527 11531])
                            ("parentnode" variable nil (reparse-symbol function_parameters) [11533 11543])
                            ("name" variable nil (reparse-symbol function_parameters) [11545 11549])
                            ("atom" variable nil (reparse-symbol function_parameters) [11568 11572])
                            ("title" variable nil (reparse-symbol function_parameters) [11579 11584])
                            ("kind" variable nil (reparse-symbol function_parameters) [11606 11610])
                            ("optlevel" variable nil (reparse-symbol function_parameters) [11634 11642])
                            ("filters" variable nil (reparse-symbol function_parameters) [11666 11673])
                            ("tmp_dir" variable nil (reparse-symbol function_parameters) [11697 11704])
                            ("expectedrows" variable nil (reparse-symbol function_parameters) [11728 11740])
                            ("byteorder" variable nil (reparse-symbol function_parameters) [11761 11770])
                            ("blocksizes" variable nil (reparse-symbol function_parameters) [11794 11804])
                            ("new" variable nil (reparse-symbol function_parameters) [11828 11831]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11514 14625])
                    ("_g_post_init_hook" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14652 14656]))                          )
                        (reparse-symbol indented_block_body) [14630 21717])
                    ("_g_postInitHook" variable nil (reparse-symbol indented_block_body) [21722 21771])
                    ("initial_append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21796 21800])
                            ("xarr" variable nil (reparse-symbol function_parameters) [21802 21806])
                            ("nrow" variable nil (reparse-symbol function_parameters) [21808 21812])
                            ("reduction" variable nil (reparse-symbol function_parameters) [21814 21823]))                          
                        :documentation "Compute an initial indices arrays for data to be indexed.")
                        (reparse-symbol indented_block_body) [21777 25463])
                    ("final_idx32" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25484 25488])
                            ("idx" variable nil (reparse-symbol function_parameters) [25490 25493])
                            ("offset" variable nil (reparse-symbol function_parameters) [25495 25501]))                          
                        :documentation "Perform final operations in 32-bit indices.")
                        (reparse-symbol indented_block_body) [25468 26210])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26226 26230])
                            ("xarr" variable nil (reparse-symbol function_parameters) [26232 26236])
                            ("update" variable nil (reparse-symbol function_parameters) [26238 26244]))                          
                        :documentation "Append the array to the index objects.")
                        (reparse-symbol indented_block_body) [26215 28827])
                    ("append_last_row" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28852 28856])
                            ("xarr" variable nil (reparse-symbol function_parameters) [28858 28862])
                            ("update" variable nil (reparse-symbol function_parameters) [28864 28870]))                          
                        :documentation "Append the array to the last row index objects.")
                        (reparse-symbol indented_block_body) [28832 30813])
                    ("appendLastRow" variable nil (reparse-symbol indented_block_body) [30818 30863])
                    ("optimize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30882 30886])
                            ("verbose" variable nil (reparse-symbol function_parameters) [30888 30895]))                          
                        :documentation "Optimize an index so as to allow faster searches.

        verbose
            If True, messages about the progress of the
            optimization process are printed out.

        ")
                        (reparse-symbol indented_block_body) [30869 33523])
                    ("do_complete_sort" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33549 33553]))                          
                        :documentation "Bring an already optimized index into a complete sorted state.")
                        (reparse-symbol indented_block_body) [33528 38734])
                    ("swap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38748 38752])
                            ("what" variable nil (reparse-symbol function_parameters) [38754 38758])
                            ("mode" variable nil (reparse-symbol function_parameters) [38760 38764]))                          
                        :documentation "Swap chunks or slices using a certain bounds reference.")
                        (reparse-symbol indented_block_body) [38739 40578])
                    ("create_temp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40599 40603]))                          
                        :documentation "Create some temporary objects for slice sorting purposes.")
                        (reparse-symbol indented_block_body) [40583 42846])
                    ("create_temp2" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42868 42872]))                          
                        :documentation "Create some temporary objects for slice sorting purposes.")
                        (reparse-symbol indented_block_body) [42851 44516])
                    ("cleanup_temp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44538 44542]))                          
                        :documentation "Copy the data and delete the temporaries for sorting purposes.")
                        (reparse-symbol indented_block_body) [44521 47103])
                    ("get_neworder" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47125 47129])
                            ("neworder" variable nil (reparse-symbol function_parameters) [47131 47139])
                            ("src_disk" variable nil (reparse-symbol function_parameters) [47141 47149])
                            ("tmp_disk" variable nil (reparse-symbol function_parameters) [47151 47159])
                            ("lastrow" variable nil (reparse-symbol function_parameters) [47182 47189])
                            ("nslices" variable nil (reparse-symbol function_parameters) [47191 47198])
                            ("offset" variable nil (reparse-symbol function_parameters) [47200 47206])
                            ("dtype" variable nil (reparse-symbol function_parameters) [47208 47213]))                          
                        :documentation "Get sorted & indices values in new order.")
                        (reparse-symbol indented_block_body) [47108 48720])
                    ("swap_chunks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48741 48745])
                            ("mode" variable nil (reparse-symbol function_parameters) [48747 48751]))                          
                        :documentation "Swap & reorder the different chunks in a block.")
                        (reparse-symbol indented_block_body) [48725 50702])
                    ("read_slice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50722 50726])
                            ("where" variable nil (reparse-symbol function_parameters) [50728 50733])
                            ("nslice" variable nil (reparse-symbol function_parameters) [50735 50741])
                            ("buffer" variable nil (reparse-symbol function_parameters) [50743 50749])
                            ("start" variable nil (reparse-symbol function_parameters) [50751 50756]))                          
                        :documentation "Read a slice from the `where` dataset and put it in `buffer`.")
                        (reparse-symbol indented_block_body) [50707 51212])
                    ("write_slice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51233 51237])
                            ("where" variable nil (reparse-symbol function_parameters) [51239 51244])
                            ("nslice" variable nil (reparse-symbol function_parameters) [51246 51252])
                            ("buffer" variable nil (reparse-symbol function_parameters) [51254 51260])
                            ("start" variable nil (reparse-symbol function_parameters) [51262 51267]))                          
                        :documentation "Write a `slice` to the `where` dataset with the `buffer` data.")
                        (reparse-symbol indented_block_body) [51217 51727])
                    ("read_slice_lr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51781 51785])
                            ("where" variable nil (reparse-symbol function_parameters) [51787 51792])
                            ("buffer" variable nil (reparse-symbol function_parameters) [51794 51800])
                            ("start" variable nil (reparse-symbol function_parameters) [51802 51807]))                          
                        :documentation "Read a slice from the `where` dataset and put it in `buffer`.")
                        (reparse-symbol indented_block_body) [51763 52129])
                    ("write_sliceLR" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52184 52188])
                            ("where" variable nil (reparse-symbol function_parameters) [52190 52195])
                            ("buffer" variable nil (reparse-symbol function_parameters) [52197 52203])
                            ("start" variable nil (reparse-symbol function_parameters) [52205 52210]))                          
                        :documentation "Write a slice from the `where` dataset with the `buffer` data.")
                        (reparse-symbol indented_block_body) [52166 52536])
                    ("read_sliceLR" variable nil (reparse-symbol indented_block_body) [52541 52583])
                    ("reorder_slice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52607 52611])
                            ("nslice" variable nil (reparse-symbol function_parameters) [52613 52619])
                            ("sorted" variable nil (reparse-symbol function_parameters) [52621 52627])
                            ("indices" variable nil (reparse-symbol function_parameters) [52629 52636])
                            ("ssorted" variable nil (reparse-symbol function_parameters) [52638 52645])
                            ("sindices" variable nil (reparse-symbol function_parameters) [52647 52655])
                            ("tmp_sorted" variable nil (reparse-symbol function_parameters) [52679 52689])
                            ("tmp_indices" variable nil (reparse-symbol function_parameters) [52691 52702]))                          
                        :documentation "Copy & reorder the slice in source to final destination.")
                        (reparse-symbol indented_block_body) [52589 53410])
                    ("update_caches" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53433 53437])
                            ("nslice" variable nil (reparse-symbol function_parameters) [53439 53445])
                            ("ssorted" variable nil (reparse-symbol function_parameters) [53447 53454]))                          
                        :documentation "Update the caches for faster lookups.")
                        (reparse-symbol indented_block_body) [53415 54109])
                    ("reorder_slices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54133 54137])
                            ("tmp" variable nil (reparse-symbol function_parameters) [54139 54142]))                          
                        :documentation "Reorder completely the index at slice level.

        This method has to maintain the locality of elements in the
        ambit of ``blocks``, i.e. an element of a ``block`` cannot be
        sent to another ``block`` during this reordering.  This is
        *critical* for ``light`` indexes to be able to use this.

        This version of reorder_slices is optimized in that *two*
        complete slices are taken at a time (including the last row
        slice) so as to sort them.  Then, each new slice that is read is
        put at the end of this two-slice buffer, while the previous one
        is moved to the beginning of the buffer.  This is in order to
        better reduce the entropy of the regular part (i.e. all except
        the last row) of the index.

        A secondary effect of this is that it takes at least *twice* of
        memory than a previous version of reorder_slices() that only
        reorders on a slice-by-slice basis.  However, as this is more
        efficient than the old version, one can configure the slicesize
        to be smaller, so the memory consumption is barely similar.

        ")
                        (reparse-symbol indented_block_body) [54114 59279])
                    ("swap_slices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59300 59304])
                            ("mode" variable nil (reparse-symbol function_parameters) [59306 59310]))                          
                        :documentation "Swap slices in a superblock.")
                        (reparse-symbol indented_block_body) [59284 62512])
                    ("search_item_lt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62536 62540])
                            ("where" variable nil (reparse-symbol function_parameters) [62542 62547])
                            ("item" variable nil (reparse-symbol function_parameters) [62549 62553])
                            ("nslice" variable nil (reparse-symbol function_parameters) [62555 62561])
                            ("limits" variable nil (reparse-symbol function_parameters) [62563 62569])
                            ("start" variable nil (reparse-symbol function_parameters) [62571 62576]))                          
                        :documentation "Search a single item in a specific sorted slice.")
                        (reparse-symbol indented_block_body) [62517 63742])
                    ("compute_overlaps_finegrain" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63778 63782])
                            ("where" variable nil (reparse-symbol function_parameters) [63784 63789])
                            ("message" variable nil (reparse-symbol function_parameters) [63791 63798])
                            ("verbose" variable nil (reparse-symbol function_parameters) [63800 63807]))                          
                        :documentation "Compute some statistics about overlaping of slices in index.

        It returns the following info:

        noverlaps : int
            The total number of elements that overlaps in index.
        multiplicity : array of int
            The number of times that a concrete slice overlaps with any other.
        toverlap : float
            An ovelap index: the sum of the values in segment slices that
            overlaps divided by the entire range of values.  This index is only
            computed for numerical types.

        ")
                        (reparse-symbol indented_block_body) [63747 67899])
                    ("compute_overlaps" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67925 67929])
                            ("where" variable nil (reparse-symbol function_parameters) [67931 67936])
                            ("message" variable nil (reparse-symbol function_parameters) [67938 67945])
                            ("verbose" variable nil (reparse-symbol function_parameters) [67947 67954]))                          
                        :documentation "Compute some statistics about overlaping of slices in index.

        It returns the following info:

        noverlaps : int
            The total number of slices that overlaps in index.
        multiplicity : array of int
            The number of times that a concrete slice overlaps with any other.
        toverlap : float
            An ovelap index: the sum of the values in segment slices that
            overlaps divided by the entire range of values.  This index is only
            computed for numerical types.

        ")
                        (reparse-symbol indented_block_body) [67904 70709])
                    ("read_sorted_indices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70738 70742])
                            ("what" variable nil (reparse-symbol function_parameters) [70744 70748])
                            ("start" variable nil (reparse-symbol function_parameters) [70750 70755])
                            ("stop" variable nil (reparse-symbol function_parameters) [70757 70761])
                            ("step" variable nil (reparse-symbol function_parameters) [70763 70767]))                          
                        :documentation "Return the sorted or indices values in the specified range.")
                        (reparse-symbol indented_block_body) [70714 72265])
                    ("read_sorted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72286 72290])
                            ("start" variable nil (reparse-symbol function_parameters) [72292 72297])
                            ("stop" variable nil (reparse-symbol function_parameters) [72304 72308])
                            ("step" variable nil (reparse-symbol function_parameters) [72315 72319]))                          
                        :documentation "Return the sorted values of index in the specified range.

        The meaning of the start, stop and step arguments is the same as in
        :meth:`Table.read_sorted`.

        ")
                        (reparse-symbol indented_block_body) [72270 72591])
                    ("readSorted" variable nil (reparse-symbol indented_block_body) [72596 72634])
                    ("read_indices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72657 72661])
                            ("start" variable nil (reparse-symbol function_parameters) [72663 72668])
                            ("stop" variable nil (reparse-symbol function_parameters) [72675 72679])
                            ("step" variable nil (reparse-symbol function_parameters) [72686 72690]))                          
                        :documentation "Return the indices values of index in the specified range.

        The meaning of the start, stop and step arguments is the same as in
        :meth:`Table.read_sorted`.

        ")
                        (reparse-symbol indented_block_body) [72640 72964])
                    ("readIndices" variable nil (reparse-symbol indented_block_body) [72969 73009])
                    ("_process_range" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73034 73038])
                            ("start" variable nil (reparse-symbol function_parameters) [73040 73045])
                            ("stop" variable nil (reparse-symbol function_parameters) [73047 73051])
                            ("step" variable nil (reparse-symbol function_parameters) [73053 73057]))                          
                        :documentation "Get a range specifc for the index usage.")
                        (reparse-symbol indented_block_body) [73015 73615])
                    ("_processRange" variable nil (reparse-symbol indented_block_body) [73620 73664])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73686 73690])
                            ("key" variable nil (reparse-symbol function_parameters) [73692 73695]))                          
                        :documentation "Return the indices values of index in the specified range.

        If key argument is an integer, the corresponding index is returned.  If
        key is a slice, the range of indices determined by it is returned.  A
        negative value of step in slice is supported, meaning that the results
        will be returned in reverse order.

        This method is equivalent to :meth:`Index.read_indices`.

        ")
                        (reparse-symbol indented_block_body) [73670 74461])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74478 74482]))                          )
                        (reparse-symbol indented_block_body) [74466 74515])
                    ("restorecache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74537 74541]))                          )
                        (reparse-symbol indented_block_body) [74520 76337])
                    ("search" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76353 76357])
                            ("item" variable nil (reparse-symbol function_parameters) [76359 76363]))                          
                        :documentation "Do a binary search in this index for an item.")
                        (reparse-symbol indented_block_body) [76342 80734])
                    ("search_scalar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80831 80835])
                            ("item" variable nil (reparse-symbol function_parameters) [80837 80841])
                            ("sorted" variable nil (reparse-symbol function_parameters) [80843 80849]))                          
                        :documentation "Do a binary search in this index for an item.")
                        (reparse-symbol indented_block_body) [80813 81218])
                    ("search_last_row" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81243 81247])
                            ("item" variable nil (reparse-symbol function_parameters) [81249 81253]))                          )
                        (reparse-symbol indented_block_body) [81223 84239])
                    ("searchLastRow" variable nil (reparse-symbol indented_block_body) [84244 84289])
                    ("get_chunkmap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84312 84316]))                          
                        :documentation "Compute a map with the interesting chunks in index.")
                        (reparse-symbol indented_block_body) [84295 86930])
                    ("get_lookup_range" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86956 86960])
                            ("ops" variable nil (reparse-symbol function_parameters) [86962 86965])
                            ("limits" variable nil (reparse-symbol function_parameters) [86967 86973]))                          )
                        (reparse-symbol indented_block_body) [86935 88831])
                    ("getLookupRange" variable nil (reparse-symbol indented_block_body) [88836 88883])
                    ("_f_remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88903 88907])
                            ("recursive" variable nil (reparse-symbol function_parameters) [88909 88918]))                          
                        :documentation "Remove this Index object.")
                        (reparse-symbol indented_block_body) [88889 89099])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89116 89120]))                          
                        :documentation "This provides a more compact representation than __repr__")
                        (reparse-symbol indented_block_body) [89104 89581])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89599 89603]))                          
                        :documentation "This provides more metainfo than standard __repr__")
                        (reparse-symbol indented_block_body) [89586 90667]))                  
                :type "class")
                nil [3398 90667])
            ("IndexesDescG" type
               (:superclasses ("NotLoggedMixin" "Group")
                :members 
                  ( ("_c_classid" variable nil (reparse-symbol indented_block_body) [90716 90737])
                    ("_c_classId" variable nil (reparse-symbol indented_block_body) [90743 90791])
                    ("_g_width_warning" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90818 90822]))                          )
                        (reparse-symbol indented_block_body) [90797 91144])
                    ("_g_widthWarning" variable nil (reparse-symbol indented_block_body) [91149 91197]))                  
                :type "class")
                nil [90669 91198])
            ("IndexesTableG" type
               (:superclasses ("NotLoggedMixin" "Group")
                :members 
                  ( ("_c_classid" variable nil (reparse-symbol indented_block_body) [91248 91269])
                    ("_c_classId" variable nil (reparse-symbol indented_block_body) [91275 91323])
                    ("_getauto" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91342 91346]))                          )
                        (reparse-symbol indented_block_body) [91329 91473])
                    ("_setauto" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91491 91495])
                            ("auto" variable nil (reparse-symbol function_parameters) [91497 91501]))                          )
                        (reparse-symbol indented_block_body) [91478 91550])
                    ("_delauto" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91568 91572]))                          )
                        (reparse-symbol indented_block_body) [91555 91612])
                    ("auto" variable nil (reparse-symbol indented_block_body) [91616 91661])
                    ("_g_width_warning" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91688 91692]))                          )
                        (reparse-symbol indented_block_body) [91667 92002])
                    ("_g_widthWarning" variable nil (reparse-symbol indented_block_body) [92007 92055])
                    ("_g_check_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92079 92083])
                            ("name" variable nil (reparse-symbol function_parameters) [92085 92089]))                          )
                        (reparse-symbol indented_block_body) [92061 92237])
                    ("_g_checkName" variable nil (reparse-symbol indented_block_body) [92242 92284])
                    ("_gettable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92304 92308]))                          )
                        (reparse-symbol indented_block_body) [92290 92598])
                    ("table" variable nil (reparse-symbol indented_block_body) [92603 92729]))                  
                :type "class")
                nil [91200 92730])
            ("OldIndex" type
               (:documentation "This is meant to hide indexes of PyTables 1.x files."
                :superclasses ("NotLoggedMixin" "Group")
                :members 
                  ( ("_c_classid" variable nil (reparse-symbol indented_block_body) [92839 92860])
                    ("_c_classId" variable nil (reparse-symbol indented_block_body) [92866 92914]))                  
                :type "class")
                nil [92732 92915]))          
      :file "index.py"
      :pointmax 93019
      :fsize 93018
      :lastmodtime '(22252 26643 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "path.py"
      :file "path.py"
      :fsize 5491
      :lastmodtime '(22252 26643 0 0))
    (semanticdb-table "node.py"
      :file "node.py"
      :fsize 34143
      :lastmodtime '(22252 26643 0 0))
    (semanticdb-table "atom.py"
      :file "atom.py"
      :fsize 41422
      :lastmodtime '(22252 26643 0 0))
    (semanticdb-table "earray.py"
      :file "earray.py"
      :fsize 9729
      :lastmodtime '(22252 26643 0 0))
    (semanticdb-table "carray.py"
      :file "carray.py"
      :fsize 10431
      :lastmodtime '(22252 26643 0 0))
    (semanticdb-table "leaf.py"
      :file "leaf.py"
      :fsize 27723
      :lastmodtime '(22252 26643 0 0))
    (semanticdb-table "indexes.py"
      :file "indexes.py"
      :fsize 6746
      :lastmodtime '(22252 26643 0 0))
    (semanticdb-table "group.py"
      :file "group.py"
      :fsize 49455
      :lastmodtime '(22252 26643 0 0))
    (semanticdb-table "exceptions.py"
      :file "exceptions.py"
      :fsize 11253
      :lastmodtime '(22252 26643 0 0))
    (semanticdb-table "utils.py"
      :file "utils.py"
      :fsize 15297
      :lastmodtime '(22252 26643 0 0))
    (semanticdb-table "lrucacheextension.py"
      :file "lrucacheextension.py"
      :fsize 293
      :lastmodtime '(22252 26643 0 0))
    (semanticdb-table "_past.py"
      :file "_past.py"
      :fsize 22697
      :lastmodtime '(22252 26643 0 0)))
  :file "!Users!zhangli!anaconda2!lib!python2.7!site-packages!tables!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
